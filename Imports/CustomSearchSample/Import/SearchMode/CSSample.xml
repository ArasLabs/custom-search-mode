<AML>
 <Item type="SearchMode" id="7A32EA3C5E8C475F9828AE00C5F2EE4F" action="add">
  <is_active>0</is_active>
  <label xml:lang="en">Custom Sample</label>
  <search_handler>function CSSample(searchContainer, aras) {
    this.supportXClassSearch = false;

    // Call base SearchMode constructor
    SearchMode.prototype.constructor.call(this, searchContainer, aras);
    this.complexity = 3;

    // For demonstration purposes, we only want this to run on the Part ItemType
    this.isPartItemType = (searchContainer.itemTypeName &amp;&amp; searchContainer.itemTypeName == 'Part');

    // Add the iframe that we need
    this.csSampleIframe = document.createElement("iframe");
    this.csSampleIframe.setAttribute("id", "cs_frame");
    this.csSampleIframe.setAttribute("FRAMEBORDER", 0);
    this.csSampleIframe.setAttribute("SCROLLING", "auto");
    this.csSampleIframe.setAttribute("style", "width:100%; height:200px;");
    searchContainer.searchPlaceholderCell.appendChild(this.csSampleIframe);
    searchContainer.setStyleAttribute('display', '');
    searchContainer.toggleSearchPlaceholderVisibility(false);
}

CSSample.prototype = Object.create(SearchMode.prototype);
CSSample.prototype.constructor = CSSample;
CSSample.prototype.onStartSearchMode = function CSSampleSearchMode_onStartSearchMode(sContainer) {
    // call base onStartSearchMode method
    SearchMode.prototype.onStartSearchMode.call(this, sContainer);

    if (this.toolbar &amp;&amp; this.toolbar.IsButtonVisible("add_criteria")) {
        this.toolbar.HideItem("add_criteria");
    }

    if (this.grid) {
        this.grid.ShowInputRow(false);
    }

    var containerHeight = '150px';
    // This example search mode is intended to work only for the Part ItemType
    if (!this.isPartItemType) {
        parent.aras.AlertError("This search is specific to the Part ItemType");
        containerHeight = '10px;';
        return;
    }

    var partItemType = parent.aras.getItemTypeForClient("Part");
    if (partItemType &amp;&amp; partItemType.node) {
        if (!window.frames["cs_frame"]) return;
        var urlBase = parent.aras.getBaseURL();
        document.getElementById("cs_frame").src = urlBase + "/customer/customsearch/customsearch.html";
    }

    this.searchContainer.setStyleAttribute('height', containerHeight);
    this.searchContainer.setStyleAttribute('display', '');
    this.searchContainer.toggleSearchPlaceholderVisibility(false);
}

CSSample.prototype.onEndSearchMode = function CSSampleSearchMode_onStartSearchMode(sContainer) {
    // Call base onEndSearchMode method.
    SearchMode.prototype.onEndSearchMode.call(this);

    this.searchContainer.setStyleAttribute('display', 'none');
    this.searchContainer.toggleSearchPlaceholderVisibility(true);
};

CSSample.prototype.clearSearchCriteria = function CSSample_clearSearchCriteria() {
    var csFrame = document.getElementById("cs_frame").contentWindow.document;
    if (this.isPartItemType) {
        this.currQryItem.removeItemAttribute("where");
        this.currQryItem.removeItemAttribute("order_by");
        csFrame.getElementById("item_number").value = "";
        csFrame.getElementById("part_name").value = "";
    }
}

// Verify that the part ItemType has the appropriate properties
CSSample.prototype.generateValidationInfo = function SimpleSearchMode_generateValidationInfo() {
    var validationInfo = new Object();
    var partItemType = parent.aras.getItemTypeForClient("Part");
    if (partItemType &amp;&amp; partItemType.node) {
        partItemType = partItemType.node;
    } else {
        return null;
    }

    var itemNumberProp = partItemType.selectSingleNode("Relationships/Item[@type='Property' and name='item_number']");
    var itemNameProp = partItemType.selectSingleNode("Relationships/Item[@type='Property' and name='name']");
    if (itemNumberProp &amp;&amp; itemNameProp) {
        validationInfo["Item[@type='Part']/item_number"] = itemNumberProp;
        validationInfo["Item[@type='Part']/name"] = itemNameProp;
        return validationInfo;
    }

    // If we get here then we're missing some prop
    this.ValidationMsg =
        `Part ItemType is missing ${
            (!itemNumberProp &amp;&amp; !itemNameProp) ? "'item_number' and 'name' properties" 
            : (!itemNumberProp) ? "'item_number' property"
            : "'name' property"}!`;
    return null;
}

//Set the AML for search based upon search criteria provided
CSSample.prototype.setAml = function CSSampleSearchMode_setAml(searchAML) {

    // Call base initSearch method.
    SearchMode.prototype.setAml.call(this, searchAML);

    this.currQryItem.item.removeAttribute("where");

    var json_result;
    try {
        json_result = parent.aras.CriteriaConverter.AmlToSimple(searchAML);
    } catch (err) {
        json_result = undefined;
    }
    var propList = eval(json_result);

    //[xpath][name][value][condition]
    //xpath - Item[@type='Part']/related_id
    var xpath_num = 0;
    var name_num = 1;
    var value_num = 2;

    setPropetyValue("Item[@type='Part']/item_number", "item_number");
    setPropetyValue("Item[@type='Part']/name", "part_name");

    //Sample to set the property values from previous searh (not Implemented)
    function setPropetyValue(propXPath, fieldName) {
        var valueToSet = "";
        if (propList) {
            for (var propIndex = 0; propIndex &lt; propList.length; propIndex++) {
                if (propList[propIndex][xpath_num] === propXPath) {
                    valueToSet = propList[propIndex][value_num];
                    break;
                }
            }
        }

        if (!valueToSet)
            valueToSet = "";

    }
}
//Set your search criteria based upon data received from getAML
CSSample.prototype.setSearchCriteria = function CSSampleSearchMode_setSearchCriteria(propXpath, criteria, condition) {
    if (!criteria)
        return;

    var nodeName = propXpath.split("/");
    var nodeTemplate = this.currQryItem.dom.createElement(nodeName[nodeName.length - 1]);
    nodeTemplate.setAttribute("condition", condition);

    var inner_aml = parent.aras.CriteriaConverter.SimpleToAml(criteria, nodeTemplate.xml);

    if (!inner_aml) {
        return;
    }

    var domToAml = parent.aras.createXMLDocument();
    domToAml.loadXML(inner_aml);

    var path = "";
    for (var i = 0; i &lt; nodeName.length - 1; i++) {
        path += nodeName[i];
        if (i + 1 != nodeName.length - 1) {
            path += "/";
        }
    }
    var targetNode = this.currQryItem.dom.selectSingleNode(path);

    if (targetNode) {
        if (domToAml.documentElement) {
            targetNode.appendChild(domToAml.documentElement);
        }
    } else {
        var critNd = this._createItemByXPath(path);
        critNd.appendChild(domToAml.documentElement);
    }
}

//get the AMl from the custom search HTML
CSSample.prototype.getAml = function CSSampleSearchMode_getAml() {
    var csFrame = document.getElementById("cs_frame").contentWindow.document;
    if (this.isPartItemType) {
        this.currQryItem.removeAllCriterias();

        if (SearchMode.prototype.getAml.call(this) == undefined)
            return undefined;

        var condition = (parent.aras.getPreferenceItemProperty("Core_GlobalLayout", null, "core_use_wildcards") == "true" ? "like" : "eq");

        //Set teh AML values for your search
        this.setSearchCriteria("Item[@type='Part']/item_number", csFrame.getElementById("item_number").value, condition);
        this.setSearchCriteria("Item[@type='Part']/name", csFrame.getElementById("part_name").value, condition);
    }

    return this.currQryItem.item.xml;
};

CSSample.prototype.hide = function CSSampleSearchMode_hide() {
	this.csSampleIframe.style.display = 'none';
};

CSSample.prototype.show = function CSSampleSearchMode_show() {
	this.csSampleIframe.style.display = '';
};

CSSample.prototype.remove = function CSSampleSearchMode_remove() {
	this.searchContainer.searchPlaceholderCell.removeChild(this.csSampleIframe);
};</search_handler>
  <name>CSSample</name>
 </Item>
</AML>